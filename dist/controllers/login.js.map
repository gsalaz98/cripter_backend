{"version":3,"sources":["../src/controllers/login.ts"],"names":[],"mappings":";;AAEA,mDAA0C;AAC1C,yCAAsC;AAEzB,QAAA,aAAa,GAAG,IAAI,yBAAQ,CAAC;IACtC,aAAa,EAAE,UAAU;IACzB,aAAa,EAAE,UAAU;IACzB,OAAO,EAAE,IAAI;CAChB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE;IAC5B,WAAI,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEpC,IAAI,GAAG,EAAE;YACL,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;QACD,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,yBAAyB,EAAC,CAAC,CAAC;SACnE;QACD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,EAAE;YACvD,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,uBAAuB,EAAC,CAAC,CAAC;SACjE;QACD,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEU,QAAA,cAAc,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,OAAgB,EAAE,EAAE;IAC5E,MAAM,IAAI,GAAG,WAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAChE,IAAI,GAAG,EAAE;YACL,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC;SAChC;QACD,IAAI,OAAO,EAAE;YACT,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;SACpC;QAED,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE;gBAC7C,aAAa,EAAE;oBACX,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU;oBACjC,SAAS,EAAE,GAAG,CAAC,EAAE;oBACjB,aAAa,EAAE,IAAI,IAAI,EAAE;oBACzB,UAAU,EAAE,OAAO;iBACtB;aACJ,EAAC,CAAC,CAAA;IACP,CAAC,CAAC,CAAA;AACN,CAAC,CAAC","file":"login.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Request, Response } from 'express';\r\nimport { Strategy } from 'passport-local';\r\nimport { User } from '../models/User';\r\n\r\nexport const LocalStrategy = new Strategy({\r\n    usernameField: 'username',\r\n    passwordField: 'password',\r\n    session: true \r\n}, (username, password, done) => {\r\n    User.findOne({ username: username }, (err, user) => {\r\n        const userResults = user.toObject();\r\n\r\n        if (err) {\r\n            return done(err); \r\n        }\r\n        if (!user) { \r\n            return done(null, false, { message: 'Username does not exist'}); \r\n        }\r\n        if (!this.passwordMatches(password, userResults.password)) {\r\n            return done(null, false, { message: 'Password is incorrect'}); \r\n        }\r\n        return done(null, user);\r\n    });\r\n});\r\n\r\nexport const attemptedLogin = (req: Request, res: Response, success: boolean) => {\r\n    const user = User.findOne({ user: req.body.username }, (err, doc) => {\r\n        if (err) {\r\n            console.log(`Error: ${err}`);\r\n        }\r\n        if (success) {\r\n            doc.set('lastLogin', new Date());\r\n        }\r\n\r\n        doc.update({ user: req.body.username }, { $push: {\r\n            loginAttempts: {\r\n                userAgent: req.headers.user_agent,\r\n                ipAddress: req.ip,\r\n                dateAttempted: new Date(),  \r\n                successful: success,\r\n            }\r\n        }})\r\n    })\r\n};"]}