{"version":3,"sources":["../src/models/User.ts"],"names":[],"mappings":"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","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nimport { config } from '../config'\r\nimport { userInfo } from 'os';\r\n\r\nexport const UserSchema = new mongoose.Schema({\r\n    userId: Number,\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        index: {\r\n            unique: true,\r\n        }\r\n    },\r\n    username: {\r\n        type: String,\r\n        required: true,\r\n        index: {\r\n            unique: true,\r\n        }\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    createdOn: {\r\n        type: Date,\r\n        default: Date.now\r\n    },\r\n    lastModified: {\r\n        type: Date,\r\n        default: Date.now,\r\n    },\r\n    lastLogin: Date,\r\n    loginAttempts: [{\r\n        userAgent: String,\r\n        ipAddress: String,\r\n        dateAttempted: Date,  \r\n        successful: Boolean,\r\n    }],\r\n    apiKeys: [{\r\n        key: String, \r\n        createdOn: Date, \r\n        expires: Boolean, \r\n        expiryDate: Date, \r\n        ipWhiteList: [String] \r\n    }],\r\n    subscriptions: [{\r\n        subscriptionId: Number,\r\n        createdOn: Date,\r\n        subscriptionExpires: Boolean, \r\n        expiryDate: Date\r\n    }],\r\n    customerType: Number,\r\n    stripe: {\r\n        stripeApiKey: String,\r\n        hook: String,\r\n        firstName: String,\r\n        lastName: String,\r\n        email: String,\r\n    }\r\n});\r\n\r\n/**\r\n * Middleware accomplishes multiple things:\r\n * 1. Updates the 'lastModified' field\r\n * 2. Can hash the password using bcrypt if the field has been modified\r\n */\r\nUserSchema.pre('save', function(next, res) {\r\n    const user = this;\r\n\r\n    if (user.isModified('password')) { \r\n        bcrypt.genSalt(config.salt_rounds, (err, salt) => {\r\n            if (err) {\r\n                return next(err);\r\n            }\r\n            bcrypt.hash(user.get('password'), salt, (err, hashed) => {\r\n                user.set('password', hashed);\r\n                user.set('lastModified', new Date());\r\n\r\n                next();\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nexport const User = mongoose.model('User', UserSchema);\r\n\r\nUser.prototype.passwordMatches = function(user: string, password: string) {\r\n    let passwordMatch = false;\r\n\r\n    User.find({ user: user }).limit(1).then((res: mongoose.Document[]) => {\r\n        if (!res.length) {\r\n            throw new Error('User not found');\r\n        }\r\n        bcrypt.compare(res[0].toObject().password, password, (err, same) => {\r\n            passwordMatch = same;\r\n        });\r\n    }).catch((reason) => {\r\n        console.log(`Error: ${reason}`);\r\n    });\r\n\r\n    return passwordMatch;\r\n}"]}