{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,8DAAqC;AACrC,8DAAsC;AACtC,kEAAyC;AACzC,sDAA8B;AAC9B,oDAA4B;AAC5B,wDAAgC;AAChC,wDAAgC;AAChC,sEAAsC;AAEtC,qCAAkC;AAClC,qEAAuD;AAEvD,kBAAQ,CAAC,OAAO,CAAC,eAAM,CAAC,aAAa,CAAC,CAAC;AACvC,kBAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AAE/B,QAAA,GAAG,GAAG,iBAAO,EAAE,CAAC;AAC7B,IAAI,EAAE,GAAG,kBAAQ,CAAC,UAAU,CAAC;AAE7B,WAAG,CAAC,GAAG,CAAC,gBAAM,EAAE,CAAC,CAAC;AAClB,WAAG,CAAC,GAAG,CAAC,qBAAW,EAAE,CAAC,CAAA;AACtB,WAAG,CAAC,GAAG,CAAC,yBAAO,CAAC;IACZ,IAAI,EAAE,cAAc;IACpB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,kGAAkG;IACxI,MAAM,EAAE;QACJ,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC;KAC5D;CACJ,CAAC,CAAC,CAAC;AACJ,WAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,WAAG,CAAC,GAAG,CAAC,uBAAY,EAAE,CAAC,CAAC;AACxB,WAAG,CAAC,GAAG,CAAC,kBAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;AAC/B,WAAG,CAAC,GAAG,CAAC,kBAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5B,WAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAElC;;WAEW;AACX,WAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACvC,kBAAQ,CAAC,YAAY,CAAC,OAAO,EAAE;QAC/B,YAAY,EAAE,KAAK;QACnB,YAAY,EAAE,KAAK;QACnB,cAAc,EAAE,cAAc;QAC9B,cAAc,EAAE,SAAS;KAAC,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;QAE5C,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAE/B,eAAe,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAE9D,IAAI,IAAI,EAAE;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACjB,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,kBAAkB;aAChC,CAAC,CAAC;SACN;IACT,CAAC,CAAC,CAAA;AAAA,CAAC,CAAC,CAAC;AAEL,WAAG,CAAC,MAAM,CAAC,eAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AAE3B,OAAO,CAAC,GAAG,CAAC,qBAAqB,eAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC","file":"index.js","sourcesContent":["import bodyParser from 'body-parser';\r\nimport compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport express from 'express';\r\nimport helmet from 'helmet';\r\nimport mongoose from 'mongoose';\r\nimport passport from 'passport';\r\nimport session from 'express-session';\r\n\r\nimport { config } from './config';\r\nimport * as LoginController from './controllers/login';\r\n\r\nmongoose.connect(config.db_connection);\r\npassport.use(LoginController.LocalStrategy);\r\n\r\nexport const app = express();\r\nlet db = mongoose.connection;\r\n\r\napp.use(helmet());\r\napp.use(compression())\r\napp.use(session({\r\n    name: 'user_session',\r\n    secret: process.env.SESSION_SECRET || 'c308101f5823f2d4d02e10dd789005312906f451a1789c705e797751458397f0ef5e9e791bdca4624205970f189c1a86',\r\n    cookie: {\r\n        secure: true,\r\n        httpOnly: true,\r\n        expires: new Date(Date.now() + 60 * 60 * 24 * 180 * 1000),\r\n    }\r\n}));\r\napp.use(bodyParser.json());\r\napp.use(cookieParser());\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\napp.use(express.static('static'));\r\n\r\n/*-*-*-*-*\r\n  Routes *\r\n *-*-*-*-*/\r\napp.post('/auth/login', (req, res, next) => {\r\n    passport.authenticate('local', { \r\n    failureFlash: false, \r\n    successFlash: false,\r\n    failureMessage: 'Login failed',\r\n    successMessage: 'Success'}, (err, user, info) => {\r\n\r\n        console.log(\"Attempted login\");\r\n\r\n        LoginController.attemptedLogin(req, res, user ? true : false);\r\n\r\n        if (user) {\r\n            res.status(200).json({\r\n                'success': true,\r\n                'message': 'Login Successful'\r\n            });\r\n        }\r\n})});\r\n\r\napp.listen(config['port']);\r\n\r\nconsole.log(`Listening on port ${config['port']}`);\r\n"]}